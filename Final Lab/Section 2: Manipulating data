1.
# Add sharemen column
recent_grads['sharemen'] = recent_grads['men']/recent_grads['total']

2.
# Find the maximum percentage value of men
men_col=recent_grads['sharemen']
max_men = np.max(men_col)
 
# Output the row with the highest percentage of men
print(recent_grads[men_col==max_men])

3.
# Add gender_diff column
recent_grads['gender_diff'] = recent_grads['sharewomen']-recent_grads['sharemen']

4.
# Make all gender difference values positive
recent_grads['gender_diff'] = recent_grads['gender_diff'].abs()

# Find the 5 rows with lowest gender rate difference
print(recent_grads.nsmallest(5,'gender_diff'))

5.
# Rows where gender rate difference is greater than .30 
diff_30 = recent_grads['gender_diff'] > .30

# Rows with more men
more_men = recent_grads['sharemen'] > recent_grads['sharewomen']

# Combine more_men and diff_30
more_men_and_diff_30 = np.logical_and(more_men,diff_30)

# Find rows with more men and and gender rate difference greater than .30
fewer_women = recent_grads[more_men_and_diff_30.values]

6.
# Group by major category and count
print(recent_grads.groupby(['major_category']).major_category.count())

7.
# Group departments that have less women by category and count
print(fewer_women.groupby(['major_category']).major_category.count())

8.
# Report average gender difference by major category
print(recent_grads.groupby(['major_category']).gender_diff.mean())

9.
# Find average number of low wage jobs and unemployment rate of each major category
dept_stats = recent_grads.groupby(['major_category'])['low_wage_jobs', 'unemployment_rate'].mean()
print(dept_stats)
